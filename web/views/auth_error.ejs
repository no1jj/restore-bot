<!DOCTYPE html>
<html lang="ko" data-theme="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ïù∏Ï¶ù Ïò§Î•ò</title>
    <style>
        :root {
            --bg-gradient: linear-gradient(to bottom right, #1e1e2f, #2c2c3c);
            --container-bg: rgba(35, 35, 50, 0.8);
            --border-color: rgba(255, 255, 255, 0.1);
            --text-color: #e4e4e4;
            --heading-color: #61dafb;
            --message-color: #cccccc;
            --button-gradient: linear-gradient(45deg, #3a7bd5, #4889e3);
            --button-hover-gradient: linear-gradient(45deg, #4889e3, #5a9cf2);
            --shadow-color: rgba(0, 0, 0, 0.3);
            --button-hover-shadow: rgba(58, 123, 213, 0.4);
        }

        html[data-theme="light"] {
            --bg-gradient: linear-gradient(to bottom right, #ffffff, #fdf1ec);
            --container-bg: rgba(255, 255, 255, 0.85);
            --border-color: rgba(0, 0, 0, 0.05);
            --text-color: #333333;
            --heading-color: #ff7d45;
            --message-color: #555555;
            --button-gradient: linear-gradient(45deg, #ff7d45, #ffa270);
            --button-hover-gradient: linear-gradient(45deg, #ffa270, #ffb391);
            --shadow-color: rgba(0, 0, 0, 0.1);
            --button-hover-shadow: rgba(255, 125, 69, 0.3);
        }
        body {
            font-family: 'Poppins', 'Noto Sans KR', sans-serif;
            margin: 0;
            padding: 0;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            background: var(--bg-gradient);
            background-size: 400% 400%;
            animation: gradientBG 20s ease infinite;
            color: var(--text-color);
            transition: all 0.3s ease;
        }

        @keyframes gradientBG {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .container {
            background-color: var(--container-bg);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            text-align: center;
            max-width: 500px;
            width: 90%;
            backdrop-filter: blur(5px);
            transform: translateY(0);
            animation: float 8s ease-in-out infinite;
            border: 2px solid var(--border-color);
            transition: all 0.3s ease;
        }

        @media (max-width: 576px) {
            .container {
                padding: 30px 20px;
                margin: 0 15px;
            }
        }

        @keyframes float {
            0% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
            100% { transform: translateY(0px); }
        }

        .error-icon {
            font-size: 80px;
            margin-bottom: 20px;
            animation: shake 0.7s ease-in-out;
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            10%, 50%, 90% { transform: translateX(-4px); }
            30%, 70% { transform: translateX(4px); }
        }

        h1 {
            color: var(--heading-color);
            font-size: 2.5rem;
            margin-bottom: 15px;
            font-weight: 700;
            transition: color 0.3s ease;
        }

        .error-code {
            background-color: var(--error-code-bg);
            padding: 10px 15px;
            border-radius: 50px;
            display: inline-block;
            font-family: monospace;
            font-weight: bold;
            color: var(--error-code-color);
            margin: 15px 0;
            box-shadow: 0 4px 8px var(--error-code-shadow);
            transition: all 0.3s ease;
        }

        .error-message {
            color: var(--text-color);
            font-size: 1.1rem;
            line-height: 1.6;
            margin-bottom: 25px;
            font-weight: 400;
            letter-spacing: -0.2px;
            transition: color 0.3s ease;
        }

        .cta-button {
            display: inline-block;
            background: var(--button-gradient);
            color: white;
            text-decoration: none;
            padding: 12px 25px;
            border-radius: 50px;
            font-weight: 600;
            transition: all 0.3s ease;
            margin-top: 15px;
            border: none;
            cursor: pointer;
            box-shadow: 0 4px 8px var(--button-shadow);
        }

        .cta-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px var(--button-hover-shadow);
        }

        .theme-toggle {
            position: absolute;
            top: 20px;
            right: 20px;
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: var(--text-color);
            transition: transform 0.3s ease;
            z-index: 100;
        }

        .theme-toggle:hover {
            transform: rotate(30deg);
        }
    </style>
</head>
<body>
    <button class="theme-toggle" id="themeToggle">üåì</button>
    <div class="container">
        <div class="error-icon">üòî</div>
        <h1>Ïù∏Ï¶ù Ïò§Î•ò</h1>
        <div class="error-message">
            Ïù∏Ï¶ù Í≥ºÏ†ïÏóêÏÑú Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.
        </div>
        <div class="error-code">
            Ïò§Î•ò ÏΩîÎìú: <%= ErrorCode %>
        </div>
        <div class="error-message">
            <%= Ctx %>
        </div>
        <a href="/" class="cta-button">ÌôàÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞</a>
    </div>

    <script>
        const themeToggle = document.getElementById('themeToggle');
        const html = document.documentElement;
        
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme) {
            html.setAttribute('data-theme', savedTheme);
            updateToggleIcon(savedTheme);
        }
        
        themeToggle.addEventListener('click', () => {
            const currentTheme = html.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            
            html.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
            updateToggleIcon(newTheme);
        });
        
        function updateToggleIcon(theme) {
            themeToggle.textContent = theme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
        }
    </script>
</body>
</html>

<!-- V1.1 -->