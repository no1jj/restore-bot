<!DOCTYPE html>
<html lang="ko" data-theme="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>서버 패널</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --bg-gradient: linear-gradient(to bottom right, #1e1e2f, #2c2c3c);
            --container-bg: rgba(35, 35, 50, 0.9);
            --card-bg: rgba(45, 45, 65, 0.7);
            --text-color: #e4e4e4;
            --heading-color: #61dafb;
            --border-color: rgba(255, 255, 255, 0.1);
            --switch-active: #4cd964;
            --switch-inactive: #8e8e93;
            --button-save: #4568dc;
            --button-danger: #dc4545;
            --success-color: #4cd964;
            --error-color: #ff5757;
            --text-color-rgb: 228, 228, 228;
        }

        html[data-theme="light"] {
            --bg-gradient: linear-gradient(to bottom right, #f7f7f7, #e6f0ff);
            --container-bg: rgba(255, 255, 255, 0.9);
            --card-bg: rgba(255, 255, 255, 0.9);
            --text-color: #333333;
            --heading-color: #3a7bd5;
            --border-color: rgba(0, 0, 0, 0.1);
            --switch-active: #34c759;
            --switch-inactive: #aeaeb2;
            --button-save: #3a7bd5;
            --button-danger: #ff3b30;
            --success-color: #34c759;
            --error-color: #ff3b30;
            --text-color-rgb: 51, 51, 51;
        }

        body {
            font-family: 'Roboto', 'Noto Sans KR', sans-serif;
            margin: 0;
            padding: 0;
            min-height: 100vh;
            background: var(--bg-gradient);
            color: var(--text-color);
            transition: all 0.3s ease;
        }

        .container {
            width: 90%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 30px 0;
        }

        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid var(--border-color);
        }

        .logo {
            display: flex;
            align-items: center;
        }

        .logo-icon {
            font-size: 40px;
            margin-right: 15px;
            color: var(--heading-color);
        }

        .hamburger-menu {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: var(--text-color);
            margin-right: 20px;
            transition: all 0.3s ease;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            height: 20px;
            position: relative;
            z-index: 1001;
        }

        .hamburger-menu:hover {
            color: var(--heading-color);
        }

        .hamburger-menu span {
            width: 24px;
            height: 2px;
            background-color: var(--text-color);
            display: block;
            transition: all 0.3s ease;
            border-radius: 2px;
        }

        .hamburger-menu:hover span {
            background-color: var(--heading-color);
        }

        .side-menu {
            position: fixed;
            top: 0;
            left: 0;
            height: 100vh;
            width: 280px;
            background-color: var(--container-bg);
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
            border-right: 1px solid var(--border-color);
            z-index: 1000;
            display: none;
            overflow-y: auto;
            transform: translateX(-100%);
            transition: transform 0.3s ease;
            padding-top: 20px;
        }

        .side-menu.active {
            display: block;
            transform: translateX(0);
        }
        
        .side-menu-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 15px 20px;
            border-bottom: 1px solid var(--border-color);
            margin-bottom: 10px;
        }
        
        .side-menu-title {
            font-weight: 600;
            font-size: 1.1rem;
            color: var(--heading-color);
        }
        
        .close-side-menu {
            background: none;
            border: none;
            color: var(--text-color);
            font-size: 20px;
            cursor: pointer;
            padding: 5px;
        }
        
        .close-side-menu:hover {
            color: var(--heading-color);
        }

        .side-menu-item {
            padding: 15px 20px;
            cursor: pointer;
            display: flex;
            align-items: center;
            transition: background-color 0.2s;
            color: var(--text-color);
            text-decoration: none;
            border-radius: 5px;
            margin: 0 10px 5px 10px;
        }

        .side-menu-item:hover {
            background-color: rgba(97, 218, 251, 0.1);
        }
        
        .side-menu-item.active {
            background-color: rgba(97, 218, 251, 0.2);
            font-weight: 600;
        }

        .side-menu-item i {
            margin-right: 10px;
            width: 25px;
            font-size: 1.1rem;
            text-align: center;
            color: var(--heading-color);
        }

        .side-menu-item:first-child {
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
        }

        .side-menu-item:last-child {
            border-bottom-left-radius: 8px;
            border-bottom-right-radius: 8px;
        }

        h1 {
            color: var(--heading-color);
            margin: 0;
            font-size: 2.2rem;
        }

        .user-controls {
            display: flex;
            align-items: center;
        }

        .theme-toggle {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: var(--text-color);
            margin-right: 20px;
            transition: transform 0.3s ease;
        }

        .theme-toggle:hover {
            transform: rotate(30deg);
        }

        .menu-toggle {
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
            color: var(--text-color);
            margin-right: 20px;
            transition: all 0.3s ease;
            position: relative;
        }

        .menu-toggle:hover {
            color: var(--heading-color);
        }

        .category-menu {
            position: absolute;
            top: 100%;
            right: 0;
            background-color: var(--card-bg);
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            border: 1px solid var(--border-color);
            z-index: 100;
            min-width: 150px;
            display: none;
        }

        .category-menu.active {
            display: block;
            animation: fadeIn 0.3s forwards;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .category-item {
            padding: 12px 15px;
            cursor: pointer;
            display: flex;
            align-items: center;
            transition: background-color 0.2s;
            color: var(--text-color);
            text-decoration: none;
        }

        .category-item:hover {
            background-color: rgba(97, 218, 251, 0.1);
        }

        .category-item i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }

        .category-item.active {
            background-color: rgba(97, 218, 251, 0.2);
            font-weight: 600;
        }

        .section-container {
            display: none;
        }

        .section-container.active {
            display: block;
            animation: fadeInUp 0.4s forwards;
        }

        @keyframes fadeInUp {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .logout-btn {
            background-color: var(--button-danger);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            font-size: 0.9rem;
        }

        .logout-btn i {
            margin-right: 6px;
        }

        .logout-btn:hover {
            opacity: 0.9;
            transform: translateY(-2px);
        }

        .server-info {
            display: flex;
            align-items: center;
            margin-left: 20px;
        }
        
        .server-icon {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            margin-right: 15px;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: var(--card-bg);
            border: 1px solid var(--border-color);
        }
        
        .server-icon img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .server-icon i {
            font-size: 24px;
            color: var(--heading-color);
        }
        
        .server-details {
            display: flex;
            flex-direction: column;
        }
        
        .server-name {
            font-weight: 600;
            font-size: 1.1rem;
            color: var(--heading-color);
            margin: 0;
        }
        
        .server-id {
            font-size: 0.8rem;
            color: rgba(var(--text-color-rgb), 0.7);
            margin: 0;
        }

        .cards-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 30px;
            margin-bottom: 40px;
        }

        .card {
            background-color: var(--card-bg);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            border: 1px solid var(--border-color);
            transition: transform 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
        }

        .card h2 {
            color: var(--heading-color);
            margin-top: 0;
            margin-bottom: 20px;
            font-size: 1.4rem;
            display: flex;
            align-items: center;
        }

        .card h2 i {
            margin-right: 10px;
            font-size: 1.2em;
        }

        .setting-group {
            margin-bottom: 20px;
        }

        .switch-container {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 15px;
        }

        .switch-label {
            font-weight: 500;
        }

        .switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: var(--switch-inactive);
            transition: 0.4s;
            border-radius: 24px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: 0.4s;
            border-radius: 50%;
        }

        input:checked + .slider {
            background-color: var(--switch-active);
        }

        input:checked + .slider:before {
            transform: translateX(26px);
        }

        .input-group {
            margin-bottom: 15px;
        }

        .input-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }

        .form-control {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid var(--border-color);
            border-radius: 6px;
            background-color: rgba(35, 35, 50, 0.5);
            color: var(--text-color);
            font-size: 0.95rem;
            transition: all 0.3s ease;
            box-sizing: border-box;
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--heading-color);
            box-shadow: 0 0 0 2px rgba(97, 218, 251, 0.2);
        }

        .select-wrapper {
            position: relative;
        }

        .select-wrapper::after {
            content: '\f078';
            font-family: 'Font Awesome 5 Free';
            font-weight: 900;
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-color);
            pointer-events: none;
        }

        select.form-control {
            padding-right: 30px;
            cursor: pointer;
        }

        select.form-control option {
            background-color: var(--card-bg);
            color: var(--text-color);
        }

        .enhanced-select {
            background-color: rgba(35, 35, 50, 0.7);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            max-height: 250px;
            overflow-y: auto;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            display: none;
            position: absolute;
            width: 100%;
            z-index: 10;
        }

        .select-option {
            padding: 10px 15px;
            cursor: pointer;
            display: flex;
            align-items: center;
            transition: background-color 0.2s;
        }

        .select-option:hover {
            background-color: rgba(97, 218, 251, 0.1);
        }

        .select-option.selected {
            background-color: rgba(97, 218, 251, 0.2);
        }

        .select-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px 12px;
            border: 1px solid var(--border-color);
            border-radius: 6px;
            background-color: rgba(35, 35, 50, 0.5);
            cursor: pointer;
        }

        .auth-message-card {
            background-color: var(--card-bg);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            border: 1px solid var(--border-color);
            transition: transform 0.3s ease;
            margin-top: 30px;
        }

        .auth-message-card h2 {
            color: var(--heading-color);
            margin-top: 0;
            margin-bottom: 20px;
            font-size: 1.4rem;
            display: flex;
            align-items: center;
        }

        .auth-message-card h2 i {
            margin-right: 10px;
            font-size: 1.2em;
        }

        .auth-form {
            margin-top: 20px;
        }

        .auth-preview {
            border: 1px dashed var(--border-color);
            border-radius: 10px;
            padding: 15px;
            margin-top: 20px;
            background-color: rgba(35, 35, 50, 0.3);
        }

        .auth-preview-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--heading-color);
            margin-bottom: 10px;
        }

        .auth-preview-description {
            margin-bottom: 15px;
        }

        .auth-preview-button {
            display: inline-block;
            background-color: #2ecc71;
            color: white;
            padding: 8px 16px;
            border-radius: 4px;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .auth-description {
            font-size: 0.9rem;
            margin-top: 15px;
            color: var(--text-color);
            opacity: 0.8;
        }

        .auth-preview-privacy {
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px dashed var(--border-color);
            font-size: 0.85rem;
            opacity: 0.9;
        }

        .send-auth-btn {
            background-color: #2ecc71;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            margin-top: 15px;
        }

        .send-auth-btn i {
            margin-right: 8px;
        }

        .send-auth-btn:hover {
            background-color: #3ca451;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(76, 217, 100, 0.4);
        }

        .role-option {
            display: flex;
            align-items: center;
            padding: 8px 12px;
            margin-bottom: 5px;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .role-color {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .role-name {
            flex-grow: 1;
        }

        .channel-group {
            font-weight: 600;
            opacity: 0.7;
            margin-top: 8px;
        }

        .form-actions {
            display: flex;
            justify-content: flex-end;
            margin-top: 40px;
        }

        .save-btn {
            background-color: var(--button-save);
            color: white;
            border: none;
            padding: 12px 30px;
            font-size: 1rem;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
        }

        .save-btn i {
            margin-right: 8px;
        }

        .save-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(69, 104, 220, 0.3);
        }

        .message {
            margin-bottom: 20px;
            padding: 15px;
            border-radius: 10px;
            font-weight: 500;
            display: flex;
            align-items: center;
            animation: fadeOut 8s forwards;
        }

        @keyframes fadeOut {
            0% { opacity: 1; }
            70% { opacity: 1; }
            100% { opacity: 0.7; }
        }

        .success-message {
            background-color: var(--success-color);
            color: white;
        }

        .error-message {
            background-color: var(--error-color);
            color: white;
        }

        .message i {
            margin-right: 10px;
            font-size: 1.2em;
        }

        footer {
            text-align: center;
            padding: 30px 0;
            color: rgba(var(--text-color-rgb), 0.7);
            font-size: 0.9rem;
            border-top: 1px solid var(--border-color);
            margin-top: 40px;
        }

        @media (max-width: 768px) {
            .cards-container {
                grid-template-columns: 1fr;
            }

            .server-info {
                flex-direction: column;
                text-align: center;
            }

            .server-icon {
                margin-right: 0;
                margin-bottom: 15px;
            }

            header {
                flex-direction: column;
                text-align: center;
            }

            .logo {
                margin-bottom: 20px;
                justify-content: center;
            }

            .user-controls {
                justify-content: center;
            }
            
            .side-menu {
                width: 85%;
            }
        }
        
        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 999;
            display: none;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .overlay.active {
            display: block;
            opacity: 1;
        }

        .menu-container {
            position: relative;
        }

        .privacy-notice {
            background-color: rgba(255, 193, 7, 0.1);
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border: 1px solid rgba(255, 193, 7, 0.5);
        }
        
        .privacy-notice h3 {
            margin-top: 0;
            color: #ffc107;
            font-size: 1.1rem;
        }

        .toggle-key-btn {
            border-radius: 0;
            margin-right: 1px;
            background-color: var(--card-bg);
            color: var(--text-color);
            border-color: var(--border-color);
            transition: all 0.3s ease;
        }
        
        .toggle-key-btn:hover {
            background-color: rgba(97, 218, 251, 0.1);
            color: var(--heading-color);
            border-color: var(--heading-color);
        }
        
        .copy-btn {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
            background: linear-gradient(135deg, var(--button-save), var(--heading-color));
            border: none;
            padding: 8px 15px;
            color: white;
            font-weight: 500;
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }
        
        .copy-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(97, 218, 251, 0.3);
            background: linear-gradient(135deg, var(--heading-color), var(--button-save));
        }
        
        .copy-btn.copied {
            background: linear-gradient(135deg, #28a745, #20c997);
            box-shadow: 0 2px 5px rgba(40, 167, 69, 0.4);
        }
        
        .input-group {
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            border-radius: 6px;
            overflow: hidden;
        }
        
        #recovery-key {
            border-right: none;
            letter-spacing: 1px;
            font-family: monospace;
            font-weight: 600;
            color: var(--heading-color);
        }

        .stats-container {
            margin-top: 15px;
        }
        
        .stat-item {
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--border-color);
        }
        
        .stat-item:last-child {
            border-bottom: none;
            margin-bottom: 0;
            padding-bottom: 0;
        }
        
        .stat-label {
            color: var(--text-color);
            font-size: 0.95rem;
            margin-bottom: 8px;
            opacity: 0.8;
        }
        
        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: var(--heading-color);
        }
        
        .setting-info {
            margin-top: 5px;
        }
        
        .setting-detail {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
            padding: 5px 0;
            border-bottom: 1px dashed var(--border-color);
        }
        
        .setting-detail:last-child {
            border-bottom: none;
        }
        
        .setting-label {
            font-weight: 500;
            color: var(--text-color);
            opacity: 0.8;
        }
        
        .setting-value {
            font-weight: 600;
            color: var(--text-color);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="overlay" id="overlay"></div>
        <header>
            <div class="logo">
                <div class="menu-container">
                    <button class="hamburger-menu" id="hamburgerMenu">
                        <span></span>
                        <span></span>
                        <span></span>
                    </button>
                    <div class="side-menu" id="sideMenu">
                        <div class="side-menu-header">
                            <div class="side-menu-title">RestoreBot 메뉴</div>
                            <button class="close-side-menu" id="closeSideMenu">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        <div class="side-menu-item" data-action="settings">
                            <i class="fas fa-cog"></i> 서버 설정
                        </div>
                        <div class="side-menu-item" data-action="auth">
                            <i class="fas fa-paper-plane"></i> 인증 메세지 전송
                        </div>
                        <div class="side-menu-item" data-action="logs">
                            <i class="fas fa-history"></i> 로그 조회
                        </div>
                        <div class="side-menu-item" data-action="backup">
                            <i class="fas fa-database"></i> 서버 백업/복구
                        </div>
                        <div class="side-menu-item" data-action="help">
                            <i class="fas fa-question-circle"></i> 도움말
                        </div>
                    </div>
                </div>
                <div class="logo-icon">🔐</div>
                <div class="server-info">
                    <div class="server-icon">
                        <% if (serverInfo.iconURL) { %>
                            <img src="<%= serverInfo.iconURL %>" alt="<%= serverInfo.name %>">
                        <% } else { %>
                            <i class="fab fa-discord"></i>
                        <% } %>
                    </div>
                    <div class="server-details">
                        <h2 class="server-name"><%= serverInfo.name %></h2>
                        <p class="server-id">서버 ID: <%= serverInfo.id %></p>
                    </div>
                </div>
            </div>
            <div class="user-controls">
                <button class="theme-toggle" id="themeToggle">🌓</button>
                <a href="/logout" class="logout-btn">
                    <i class="fas fa-sign-out-alt"></i> 로그아웃
                </a>
            </div>
        </header>

        <% if (locals.success_messages && success_messages.length > 0) { %>
        <div class="message success-message">
            <i class="fas fa-check-circle"></i> <%= success_messages[0] %>
        </div>
        <% } %>
        
        <% if (locals.error_messages && error_messages.length > 0) { %>
        <div class="message error-message">
            <i class="fas fa-exclamation-circle"></i> <%= error_messages[0] %>
        </div>
        <% } %>

        <form action="/setting/update" method="POST">
            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
            
            <div class="section-container active" id="settingsSection">
                <div class="cards-container">
                    <div class="card">
                        <h2><i class="fas fa-shield-alt"></i> 보안 설정</h2>
                        
                        <div class="setting-group">
                            <div class="switch-container">
                                <div class="switch-label">캡차 사용</div>
                                <label class="switch">
                                    <input type="checkbox" name="useCaptcha" <%= settings.useCaptcha ? 'checked' : '' %>>
                                    <span class="slider"></span>
                                </label>
                            </div>
                            
                            <div class="switch-container">
                                <div class="switch-label">VPN 차단</div>
                                <label class="switch">
                                    <input type="checkbox" name="blockVpn" <%= settings.blockVpn ? 'checked' : '' %>>
                                    <span class="slider"></span>
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="card">
                        <h2><i class="fas fa-user-shield"></i> 권한 설정</h2>
                        
                        <div class="input-group">
                            <label for="roleId">인증 역할</label>
                            <div class="select-wrapper">
                                <select id="roleId" name="roleId" class="form-control">
                                    <option value="0">역할 선택 안함</option>
                                    <% roles.forEach(role => { %>
                                        <option value="<%= role.id %>" 
                                                <%= settings.roleId === role.id ? 'selected' : '' %>
                                                data-color="<%= role.color %>">
                                            <%= role.name %>
                                        </option>
                                    <% }); %>
                                </select>
                            </div>
                        </div>
                        
                        <div id="selectedRole" class="role-preview" style="margin-top: 10px; display: none;">
                            <div class="role-option">
                                <span class="role-color" id="roleColor"></span>
                                <span class="role-name" id="roleName"></span>
                            </div>
                        </div>
                    </div>

                    <div class="card">
                        <h2><i class="fas fa-history"></i> 로깅 설정</h2>
                        
                        <div class="setting-group">
                            <div class="switch-container">
                                <div class="switch-label">IP 로깅</div>
                                <label class="switch">
                                    <input type="checkbox" name="loggingIp" <%= settings.loggingIp ? 'checked' : '' %>>
                                    <span class="slider"></span>
                                </label>
                            </div>
                            
                            <div class="switch-container">
                                <div class="switch-label">이메일 로깅</div>
                                <label class="switch">
                                    <input type="checkbox" name="loggingMail" <%= settings.loggingMail ? 'checked' : '' %>>
                                    <span class="slider"></span>
                                </label>
                            </div>
                        </div>
                        
                        <div class="input-group">
                            <label for="loggingChannelId">로깅 채널</label>
                            <div class="select-wrapper">
                                <select id="loggingChannelId" name="loggingChannelId" class="form-control">
                                    <option value="0">채널 선택 안함</option>
                                    <% 
                                    let lastParent = '';
                                    channels.forEach(channel => {
                                        if (lastParent !== channel.parentName) {
                                            lastParent = channel.parentName;
                                            %>
                                            <optgroup label="<%= channel.parentName %>">
                                        <% } %>
                                        
                                        <option value="<%= channel.id %>" 
                                                data-parent="<%= channel.parentName %>"
                                                <%= settings.loggingChannelId === channel.id ? 'selected' : '' %>>
                                            #<%= channel.name %>
                                        </option>
                                        
                                        <% if (channels[channels.indexOf(channel) + 1] && 
                                               channels[channels.indexOf(channel) + 1].parentName !== channel.parentName) { %>
                                            </optgroup>
                                        <% } %>
                                    <% }); %>
                                </select>
                            </div>
                            <div id="selectedChannel" class="channel-preview" style="margin-top: 10px; display: none;">
                                <div class="role-option">
                                    <span style="color: #7289da; margin-right: 8px;"><i class="fas fa-hashtag"></i></span>
                                    <span class="channel-name" id="channelName"></span>
                                    <span class="channel-category" id="channelCategory" style="margin-left: 8px; opacity: 0.7; font-size: 0.9em;"></span>
                                </div>
                            </div>
                            <div class="info-text" style="margin-top: 10px; font-size: 0.85rem; opacity: 0.8;">
                                <i class="fas fa-info-circle"></i> 채널을 선택하면 자동으로 웹훅이 생성됩니다.
                            </div>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <h2><i class="fas fa-key"></i> 복구 키</h2>
                        </div>
                        <div class="card-body">
                            <div class="form-group">
                                <label for="recovery-key">서버 복구 키 (백업 복원 시 필요)</label>
                                <div class="input-group">
                                    <input type="password" id="recovery-key" class="form-control" value="<%= serverInfo.key %>" readonly>
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-outline-secondary toggle-key-btn" id="toggle-key-btn">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button type="button" class="btn btn-primary copy-btn" id="copy-key-btn">
                                            <i class="fas fa-copy"></i> 복사
                                        </button>
                                    </div>
                                </div>
                                <small class="form-text text-muted">이 복구 키는 서버를 복원할 때 필요합니다. 안전한 곳에 보관하세요.</small>
                            </div>
                        </div>
                    </div>

                    <div class="card">
                        <h2><i class="fas fa-chart-bar"></i> 서버 통계</h2>
                        
                        <div class="stats-container">
                            <div class="stat-item">
                                <div class="stat-label">인증 완료 인원</div>
                                <div class="stat-value" id="authCount">로딩 중...</div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-actions">
                    <button type="submit" class="save-btn">
                        <i class="fas fa-save"></i> 설정 저장
                    </button>
                </div>
            </div>
        </form>

        <div class="section-container" id="authSection">
            <div class="auth-message-card">
                <h2><i class="fas fa-user-check"></i> 인증 메시지 전송</h2>
                <p>선택한 채널에 인증 메시지를 전송합니다. 사용자가 인증 버튼을 클릭하면 설정된 역할이 부여됩니다.</p>
                
                <div class="auth-form">
                    <div class="input-group">
                        <label for="authChannelId">메시지를 전송할 채널</label>
                        <div class="select-wrapper">
                            <select id="authChannelId" class="form-control">
                                <option value="0">채널 선택</option>
                                <% 
                                let lastAuthParent = '';
                                channels.forEach(channel => {
                                    if (lastAuthParent !== channel.parentName) {
                                        lastAuthParent = channel.parentName;
                                        %>
                                        <optgroup label="<%= channel.parentName %>">
                                    <% } %>
                                    
                                    <option value="<%= channel.id %>" 
                                            data-parent="<%= channel.parentName %>">
                                        #<%= channel.name %>
                                    </option>
                                    
                                    <% if (channels[channels.indexOf(channel) + 1] && 
                                           channels[channels.indexOf(channel) + 1].parentName !== channel.parentName) { %>
                                        </optgroup>
                                    <% } %>
                                <% }); %>
                            </select>
                        </div>
                    </div>
                    
                    <div class="input-group">
                        <label for="authTitle">임베드 제목</label>
                        <input type="text" id="authTitle" class="form-control" placeholder="인증 메시지의 제목을 입력하세요" value="서버 인증">
                    </div>
                    
                    <div class="input-group">
                        <label for="authDescription">임베드 설명</label>
                        <textarea id="authDescription" class="form-control" rows="3" placeholder="인증 메시지의 설명을 입력하세요">아래 버튼을 클릭하여 서버 인증을 완료해주세요.</textarea>
                    </div>
                    
                    <div class="input-group">
                        <label for="authButtonText">버튼 텍스트</label>
                        <input type="text" id="authButtonText" class="form-control" placeholder="버튼에 표시될 텍스트를 입력하세요" value="인증하기">
                    </div>
                    
                    <div class="auth-preview">
                        <div class="auth-preview-title" id="previewTitle">서버 인증</div>
                        <div class="auth-preview-description" id="previewDescription">아래 버튼을 클릭하여 서버 인증을 완료해주세요.</div>
                        <div class="auth-preview-button" id="previewButton">인증하기</div>
                        <div class="auth-preview-privacy">
                            <p><i class="fas fa-info-circle"></i> 인증을 진행하면 개인정보 처리방침에 동의한 것으로 간주됩니다.</p>
                        </div>
                    </div>
                    
                    <div class="auth-description">
                        <p><i class="fas fa-exclamation-circle"></i> 사용자가 인증 버튼을 클릭하면 디스코드 OAuth 인증 과정을 통해 설정된 역할이 부여됩니다.</p>
                        <p><i class="fas fa-shield-alt"></i> 서버 설정에 따라 캡차 인증, VPN 차단 등의 보안 기능이 적용됩니다.</p>
                    </div>
                    
                    <button type="button" id="sendAuthMessageBtn" class="send-auth-btn">
                        <i class="fas fa-paper-plane"></i> 인증 메시지 전송
                    </button>
                </div>
            </div>
        </div>

        <footer>
            &copy; <%= new Date().getFullYear() %> RestoreBot - 모든 권리 보유
        </footer>
    </div>

    <script>
        const themeToggle = document.getElementById('themeToggle');
        const html = document.documentElement;
        
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme) {
            html.setAttribute('data-theme', savedTheme);
            updateToggleIcon(savedTheme);
        }
        
        themeToggle.addEventListener('click', () => {
            const currentTheme = html.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            
            html.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
            updateToggleIcon(newTheme);
        });
        
        function updateToggleIcon(theme) {
            themeToggle.textContent = theme === 'dark' ? '☀️' : '🌙';
        }
        
        const sections = document.querySelectorAll('.section-container');
        const hamburgerMenu = document.getElementById('hamburgerMenu');
        const sideMenu = document.getElementById('sideMenu');
        const closeSideMenu = document.getElementById('closeSideMenu');
        const overlay = document.getElementById('overlay');
        const sideMenuItems = document.querySelectorAll('.side-menu-item');
        
        hamburgerMenu.addEventListener('click', (event) => {
            event.stopPropagation();
            sideMenu.classList.add('active');
            overlay.classList.add('active');
            document.body.style.overflow = 'hidden';
        });
        
        function closeSideMenuHandler() {
            sideMenu.classList.remove('active');
            overlay.classList.remove('active');
            document.body.style.overflow = '';
        }
        
        closeSideMenu.addEventListener('click', closeSideMenuHandler);
        overlay.addEventListener('click', closeSideMenuHandler);
        
        sideMenuItems.forEach(item => {
            item.addEventListener('click', () => {
                const action = item.getAttribute('data-action');
                
                sideMenuItems.forEach(menuItem => menuItem.classList.remove('active'));
                item.classList.add('active');
                
                switch (action) {
                    case 'settings':
                        sections.forEach(section => section.classList.remove('active'));
                        document.getElementById('settingsSection').classList.add('active');
                        closeSideMenuHandler();
                        break;
                    case 'auth':
                        sections.forEach(section => section.classList.remove('active'));
                        document.getElementById('authSection').classList.add('active');
                        closeSideMenuHandler();
                        break;
                    case 'logs':
                        window.location.href = '/setting/logs';
                        break;
                    case 'backup':
                        window.location.href = '/setting/backup';
                        break;
                    case 'help':
                        window.open('https://github.com/no1jj/restore-bot', '_blank');
                        closeSideMenuHandler();
                        break;
                }
            });
        });
        
        document.addEventListener('DOMContentLoaded', function() {
            const roleSelect = document.getElementById('roleId');
            const selectedRole = document.getElementById('selectedRole');
            const roleColor = document.getElementById('roleColor');
            const roleName = document.getElementById('roleName');
            
            function updateRolePreview() {
                const selectedOption = roleSelect.options[roleSelect.selectedIndex];
                
                if (selectedOption.value !== '0') {
                    roleColor.style.backgroundColor = selectedOption.dataset.color || '#99aab5';
                    roleName.textContent = selectedOption.textContent.trim();
                    selectedRole.style.display = 'block';
                } else {
                    selectedRole.style.display = 'none';
                }
            }
            
            roleSelect.addEventListener('change', updateRolePreview);
            updateRolePreview();
            
            const channelSelect = document.getElementById('loggingChannelId');
            const selectedChannel = document.getElementById('selectedChannel');
            const channelName = document.getElementById('channelName');
            const channelCategory = document.getElementById('channelCategory');
            
            function updateChannelPreview() {
                const selectedOption = channelSelect.options[channelSelect.selectedIndex];
                
                if (selectedOption.value !== '0') {
                    channelName.textContent = selectedOption.textContent.trim();
                    channelCategory.textContent = selectedOption.dataset.parent ? `(${selectedOption.dataset.parent})` : '';
                    selectedChannel.style.display = 'block';
                } else {
                    selectedChannel.style.display = 'none';
                }
            }
            
            channelSelect.addEventListener('change', updateChannelPreview);
            updateChannelPreview();
            
            const authTitle = document.getElementById('authTitle');
            const authDescription = document.getElementById('authDescription');
            const authButtonText = document.getElementById('authButtonText');
            const previewTitle = document.getElementById('previewTitle');
            const previewDescription = document.getElementById('previewDescription');
            const previewButton = document.getElementById('previewButton');
            
            function updateAuthPreview() {
                previewTitle.textContent = authTitle.value || '서버 인증';
                previewDescription.textContent = authDescription.value || '아래 버튼을 클릭하여 서버 인증을 완료해주세요.';
                previewButton.textContent = authButtonText.value || '인증하기';
            }
            
            authTitle.addEventListener('input', updateAuthPreview);
            authDescription.addEventListener('input', updateAuthPreview);
            authButtonText.addEventListener('input', updateAuthPreview);
            
            const sendAuthMessageBtn = document.getElementById('sendAuthMessageBtn');
            const authChannelId = document.getElementById('authChannelId');
            
            sendAuthMessageBtn.addEventListener('click', async function() {
                const channelId = authChannelId.value;
                if (channelId === '0') {
                    alert('메시지를 전송할 채널을 선택해주세요.');
                    return;
                }
                
                sendAuthMessageBtn.disabled = true;
                sendAuthMessageBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 전송 중...';
                
                const data = {
                    channelId: channelId,
                    title: authTitle.value || '서버 인증',
                    description: authDescription.value || '아래 버튼을 클릭하여 서버 인증을 완료해주세요.',
                    buttonText: authButtonText.value || '인증하기',
                    _csrf: document.querySelector('input[name="_csrf"]').value
                };
                
                try {
                    const response = await fetch('/setting/send-auth-message', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    });
                    
                    const result = await response.json();
                    
                    sendAuthMessageBtn.disabled = false;
                    sendAuthMessageBtn.innerHTML = '<i class="fas fa-paper-plane"></i> 인증 메시지 전송';
                    
                    if (result.success) {
                        const successMessage = document.createElement('div');
                        successMessage.className = 'message success-message';
                        successMessage.style.marginTop = '15px';
                        
                        const roleInfo = roleSelect.options.namedItem(result.roleId) ? 
                            roleSelect.options.namedItem(result.roleId).textContent : '설정된 역할';
                        
                        successMessage.innerHTML = `
                            <i class="fas fa-check-circle"></i> 
                            인증 메시지가 성공적으로 전송되었습니다.<br>
                            인증 시 부여될 역할: <strong>${roleInfo}</strong>
                        `;
                        
                        const prevMessage = document.querySelector('.auth-form .message');
                        if (prevMessage) {
                            prevMessage.remove();
                        }
                        
                        document.querySelector('.auth-form').appendChild(successMessage);
                        
                        setTimeout(() => {
                            successMessage.style.opacity = '0';
                            setTimeout(() => {
                                successMessage.remove();
                            }, 500);
                        }, 5000);
                    } else {
                        const errorMessage = document.createElement('div');
                        errorMessage.className = 'message error-message';
                        errorMessage.style.marginTop = '15px';
                        errorMessage.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${result.message}`;
                        
                        const prevMessage = document.querySelector('.auth-form .message');
                        if (prevMessage) {
                            prevMessage.remove();
                        }
                        
                        document.querySelector('.auth-form').appendChild(errorMessage);
                        
                        setTimeout(() => {
                            errorMessage.style.opacity = '0';
                            setTimeout(() => {
                                errorMessage.remove();
                            }, 500);
                        }, 5000);
                    }
                } catch (error) {
                    sendAuthMessageBtn.disabled = false;
                    sendAuthMessageBtn.innerHTML = '<i class="fas fa-paper-plane"></i> 인증 메시지 전송';
                    
                    alert('오류가 발생했습니다: ' + error.message);
                }
            });
            
            async function loadServerStats() {
                try {
                    console.log('서버 통계 로드 중...');
                    const response = await fetch('/setting/stats', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                            'Cache-Control': 'no-cache'
                        }
                    });
                    
                    if (!response.ok) {
                        throw new Error(`서버 응답 오류: ${response.status}`);
                    }
                    
                    const data = await response.json();
                    console.log('서버 통계 응답:', data);
                    
                    if (data.success) {
                        document.getElementById('authCount').textContent = data.authCount || '0';
                    } else {
                        document.getElementById('authCount').textContent = '로드 실패';
                        console.error('서버 통계 로드 실패:', data.message);
                    }
                } catch (error) {
                    document.getElementById('authCount').textContent = '오류 발생';
                    console.error('서버 통계 로드 중 오류:', error);
                }
            }
            
            loadServerStats();
            
            setInterval(loadServerStats, 30000);
        });
        
        setTimeout(() => {
            const messages = document.querySelectorAll('.message');
            messages.forEach(msg => {
                msg.style.display = 'none';
            });
        }, 8000);

        document.getElementById('toggle-key-btn').addEventListener('click', function() {
            const recoveryKeyInput = document.getElementById('recovery-key');
            const icon = this.querySelector('i');
            
            if (recoveryKeyInput.type === 'password') {
                recoveryKeyInput.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                recoveryKeyInput.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        });

        document.getElementById('copy-key-btn').addEventListener('click', function() {
            const recoveryKeyInput = document.getElementById('recovery-key');
            const originalType = recoveryKeyInput.type;
            
            recoveryKeyInput.type = 'text';
            recoveryKeyInput.select();
            document.execCommand('copy');
            
            recoveryKeyInput.type = originalType;
            
            window.getSelection().removeAllRanges();
            
            const originalText = this.innerHTML;
            this.innerHTML = '<i class="fas fa-check"></i> 복사됨';
            this.classList.add('copied');
            
            setTimeout(() => {
                this.innerHTML = originalText;
                this.classList.remove('copied');
            }, 2000);
        });
    </script>
</body>
</html> 

<!-- V1.4.2 -->