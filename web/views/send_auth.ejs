<!DOCTYPE html>
<html lang="ko" data-theme="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>인증 메시지 전송</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --bg-gradient: linear-gradient(to bottom right, #1e1e2f, #2c2c3c);
            --container-bg: rgba(35, 35, 50, 0.9);
            --card-bg: rgba(45, 45, 65, 0.7);
            --text-color: #e4e4e4;
            --heading-color: #61dafb;
            --border-color: rgba(255, 255, 255, 0.1);
            --switch-active: #4cd964;
            --switch-inactive: #8e8e93;
            --button-save: #4568dc;
            --button-danger: #dc4545;
            --success-color: #4cd964;
            --error-color: #ff5757;
            --text-color-rgb: 228, 228, 228;
        }

        html[data-theme="light"] {
            --bg-gradient: linear-gradient(to bottom right, #f7f7f7, #e6f0ff);
            --container-bg: rgba(255, 255, 255, 0.9);
            --card-bg: rgba(255, 255, 255, 0.9);
            --text-color: #333333;
            --heading-color: #3a7bd5;
            --border-color: rgba(0, 0, 0, 0.1);
            --switch-active: #34c759;
            --switch-inactive: #aeaeb2;
            --button-save: #3a7bd5;
            --button-danger: #ff3b30;
            --success-color: #34c759;
            --error-color: #ff3b30;
            --text-color-rgb: 51, 51, 51;
        }

        body {
            font-family: 'Roboto', 'Noto Sans KR', sans-serif;
            margin: 0;
            padding: 0;
            min-height: 100vh;
            background: var(--bg-gradient);
            color: var(--text-color);
            transition: all 0.3s ease;
        }

        .container {
            width: 90%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 30px 0;
        }

        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid var(--border-color);
        }

        .logo {
            display: flex;
            align-items: center;
        }

        .logo-icon {
            font-size: 40px;
            margin-right: 15px;
            color: var(--heading-color);
        }

        h1 {
            color: var(--heading-color);
            margin: 0;
            font-size: 2.2rem;
        }

        .user-controls {
            display: flex;
            align-items: center;
        }

        .theme-toggle {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: var(--text-color);
            margin-right: 20px;
            transition: transform 0.3s ease;
        }

        .theme-toggle:hover {
            transform: rotate(30deg);
        }

        .back-to-dashboard {
            background: none;
            border: none;
            color: var(--text-color);
            display: flex;
            align-items: center;
            font-size: 0.9rem;
            padding: 8px 12px;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-right: 15px;
            text-decoration: none;
        }

        .back-to-dashboard i {
            margin-right: 6px;
        }

        .back-to-dashboard:hover {
            background-color: rgba(97, 218, 251, 0.1);
        }

        .logout-btn {
            background-color: var(--button-danger);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            font-size: 0.9rem;
            text-decoration: none;
        }

        .logout-btn i {
            margin-right: 6px;
        }

        .logout-btn:hover {
            opacity: 0.9;
            transform: translateY(-2px);
        }

        .server-info {
            display: flex;
            align-items: center;
            margin-left: 20px;
        }
        
        .server-icon {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            margin-right: 15px;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: var(--card-bg);
            border: 1px solid var(--border-color);
        }
        
        .server-icon img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .server-icon i {
            font-size: 24px;
            color: var(--heading-color);
        }
        
        .server-details {
            display: flex;
            flex-direction: column;
        }
        
        .server-name {
            font-weight: 600;
            font-size: 1.1rem;
            color: var(--heading-color);
            margin: 0;
        }
        
        .server-id {
            font-size: 0.8rem;
            color: rgba(var(--text-color-rgb), 0.7);
            margin: 0;
        }

        .auth-message-card {
            background-color: var(--card-bg);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            border: 1px solid var(--border-color);
            transition: transform 0.3s ease;
            margin-top: 20px;
            margin-bottom: 40px;
        }

        .auth-message-card h2 {
            color: var(--heading-color);
            margin-top: 0;
            margin-bottom: 20px;
            font-size: 1.4rem;
            display: flex;
            align-items: center;
        }

        .auth-message-card h2 i {
            margin-right: 10px;
            font-size: 1.2em;
        }

        .auth-form {
            margin-top: 20px;
        }

        .input-group {
            margin-bottom: 15px;
        }

        .input-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }

        .form-control {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid var(--border-color);
            border-radius: 6px;
            background-color: rgba(35, 35, 50, 0.5);
            color: var(--text-color);
            font-size: 0.95rem;
            transition: all 0.3s ease;
            box-sizing: border-box;
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--heading-color);
            box-shadow: 0 0 0 2px rgba(97, 218, 251, 0.2);
        }

        .select-wrapper {
            position: relative;
        }

        .select-wrapper::after {
            content: '\f078';
            font-family: 'Font Awesome 5 Free';
            font-weight: 900;
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-color);
            pointer-events: none;
        }

        select.form-control {
            padding-right: 30px;
            cursor: pointer;
        }

        select.form-control option {
            background-color: var(--card-bg);
            color: var(--text-color);
        }

        .auth-preview {
            border: 1px dashed var(--border-color);
            border-radius: 10px;
            padding: 15px;
            margin-top: 20px;
            background-color: rgba(35, 35, 50, 0.3);
        }

        .auth-preview-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--heading-color);
            margin-bottom: 10px;
        }

        .auth-preview-description {
            margin-bottom: 15px;
        }

        .auth-preview-button {
            display: inline-block;
            background-color: #2ecc71;
            color: white;
            padding: 8px 16px;
            border-radius: 4px;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .auth-description {
            font-size: 0.9rem;
            margin-top: 15px;
            color: var(--text-color);
            opacity: 0.8;
        }

        .auth-preview-privacy {
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px dashed var(--border-color);
            font-size: 0.85rem;
            opacity: 0.9;
        }

        .send-auth-btn {
            background-color: #2ecc71;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            margin-top: 15px;
        }

        .send-auth-btn i {
            margin-right: 8px;
        }

        .send-auth-btn:hover {
            background-color: #3ca451;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(76, 217, 100, 0.4);
        }

        .message {
            margin-bottom: 20px;
            padding: 15px;
            border-radius: 10px;
            font-weight: 500;
            display: flex;
            align-items: center;
            animation: fadeOut 8s forwards;
        }

        @keyframes fadeOut {
            0% { opacity: 1; }
            70% { opacity: 1; }
            100% { opacity: 0.7; }
        }

        .success-message {
            background-color: var(--success-color);
            color: white;
        }

        .error-message {
            background-color: var(--error-color);
            color: white;
        }

        .message i {
            margin-right: 10px;
            font-size: 1.2em;
        }

        footer {
            text-align: center;
            padding: 30px 0;
            color: rgba(var(--text-color-rgb), 0.7);
            font-size: 0.9rem;
            border-top: 1px solid var(--border-color);
            margin-top: 40px;
        }

        @media (max-width: 768px) {
            .server-info {
                flex-direction: column;
                text-align: center;
            }

            .server-icon {
                margin-right: 0;
                margin-bottom: 15px;
            }

            header {
                flex-direction: column;
                text-align: center;
            }

            .logo {
                margin-bottom: 20px;
                justify-content: center;
            }

            .user-controls {
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="logo">
                <div class="logo-icon">📨</div>
                <div class="server-info">
                    <div class="server-icon">
                        <% if (serverInfo.iconURL) { %>
                            <img src="<%= serverInfo.iconURL %>" alt="<%= serverInfo.name %>">
                        <% } else { %>
                            <i class="fab fa-discord"></i>
                        <% } %>
                    </div>
                    <div class="server-details">
                        <h2 class="server-name"><%= serverInfo.name %></h2>
                        <p class="server-id">서버 ID: <%= serverInfo.id %></p>
                    </div>
                </div>
            </div>
            <div class="user-controls">
                <a href="/setting" class="back-to-dashboard">
                    <i class="fas fa-arrow-left"></i> 대시보드로 돌아가기
                </a>
                <button class="theme-toggle" id="themeToggle">🌓</button>
                <a href="/logout" class="logout-btn">
                    <i class="fas fa-sign-out-alt"></i> 로그아웃
                </a>
            </div>
        </header>

        <% if (locals.success_messages && success_messages.length > 0) { %>
        <div class="message success-message">
            <i class="fas fa-check-circle"></i> <%= success_messages[0] %>
        </div>
        <% } %>
        
        <% if (locals.error_messages && error_messages.length > 0) { %>
        <div class="message error-message">
            <i class="fas fa-exclamation-circle"></i> <%= error_messages[0] %>
        </div>
        <% } %>

        <div class="auth-message-card">
            <h2><i class="fas fa-user-check"></i> 인증 메시지 전송</h2>
            <p>선택한 채널에 인증 메시지를 전송합니다. 사용자가 인증 버튼을 클릭하면 설정된 역할이 부여됩니다.</p>
            
            <div class="auth-form">
                <div class="input-group">
                    <label for="authChannelId">메시지를 전송할 채널</label>
                    <div class="select-wrapper">
                        <select id="authChannelId" class="form-control">
                            <option value="0">채널 선택</option>
                            <% 
                            let lastAuthParent = '';
                            channels.forEach(channel => {
                                if (lastAuthParent !== channel.parentName) {
                                    lastAuthParent = channel.parentName;
                                    %>
                                    <optgroup label="<%= channel.parentName %>">
                                <% } %>
                                
                                <option value="<%= channel.id %>" 
                                        data-parent="<%= channel.parentName %>">
                                    #<%= channel.name %>
                                </option>
                                
                                <% if (channels[channels.indexOf(channel) + 1] && 
                                       channels[channels.indexOf(channel) + 1].parentName !== channel.parentName) { %>
                                    </optgroup>
                                <% } %>
                            <% }); %>
                        </select>
                    </div>
                </div>
                
                <div class="input-group">
                    <label for="authTitle">임베드 제목</label>
                    <input type="text" id="authTitle" class="form-control" placeholder="인증 메시지의 제목을 입력하세요" value="서버 인증">
                </div>
                
                <div class="input-group">
                    <label for="authDescription">임베드 설명</label>
                    <textarea id="authDescription" class="form-control" rows="3" placeholder="인증 메시지의 설명을 입력하세요">아래 버튼을 클릭하여 서버 인증을 완료해주세요.</textarea>
                </div>
                
                <div class="input-group">
                    <label for="authButtonText">버튼 텍스트</label>
                    <input type="text" id="authButtonText" class="form-control" placeholder="버튼에 표시될 텍스트를 입력하세요" value="인증하기">
                </div>
                
                <div class="auth-preview">
                    <div class="auth-preview-title" id="previewTitle">서버 인증</div>
                    <div class="auth-preview-description" id="previewDescription">아래 버튼을 클릭하여 서버 인증을 완료해주세요.</div>
                    <div class="auth-preview-button" id="previewButton">인증하기</div>
                    <div class="auth-preview-privacy">
                        <p><i class="fas fa-info-circle"></i> 인증을 진행하면 개인정보 처리방침에 동의한 것으로 간주됩니다.</p>
                    </div>
                </div>
                
                <div class="auth-description">
                    <p><i class="fas fa-exclamation-circle"></i> 사용자가 인증 버튼을 클릭하면 디스코드 OAuth 인증 과정을 통해 설정된 역할이 부여됩니다.</p>
                    <p><i class="fas fa-shield-alt"></i> 서버 설정에 따라 캡차 인증, VPN 차단 등의 보안 기능이 적용됩니다.</p>
                </div>
                
                <button type="button" id="sendAuthMessageBtn" class="send-auth-btn">
                    <i class="fas fa-paper-plane"></i> 인증 메시지 전송
                </button>
            </div>
        </div>

        <footer>
            &copy; <%= new Date().getFullYear() %> RestoreBot - 모든 권리 보유
        </footer>
    </div>

    <script>
        const themeToggle = document.getElementById('themeToggle');
        const html = document.documentElement;
        
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme) {
            html.setAttribute('data-theme', savedTheme);
            updateToggleIcon(savedTheme);
        }
        
        themeToggle.addEventListener('click', () => {
            const currentTheme = html.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            
            html.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
            updateToggleIcon(newTheme);
        });
        
        function updateToggleIcon(theme) {
            themeToggle.textContent = theme === 'dark' ? '☀️' : '🌙';
        }

        document.addEventListener('DOMContentLoaded', function() {
            const authTitle = document.getElementById('authTitle');
            const authDescription = document.getElementById('authDescription');
            const authButtonText = document.getElementById('authButtonText');
            const previewTitle = document.getElementById('previewTitle');
            const previewDescription = document.getElementById('previewDescription');
            const previewButton = document.getElementById('previewButton');
            
            function updateAuthPreview() {
                previewTitle.textContent = authTitle.value || '서버 인증';
                previewDescription.textContent = authDescription.value || '아래 버튼을 클릭하여 서버 인증을 완료해주세요.';
                previewButton.textContent = authButtonText.value || '인증하기';
            }
            
            authTitle.addEventListener('input', updateAuthPreview);
            authDescription.addEventListener('input', updateAuthPreview);
            authButtonText.addEventListener('input', updateAuthPreview);
            
            const sendAuthMessageBtn = document.getElementById('sendAuthMessageBtn');
            const authChannelId = document.getElementById('authChannelId');
            
            sendAuthMessageBtn.addEventListener('click', async function() {
                const channelId = authChannelId.value;
                if (channelId === '0') {
                    alert('메시지를 전송할 채널을 선택해주세요.');
                    return;
                }
                
                sendAuthMessageBtn.disabled = true;
                sendAuthMessageBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 전송 중...';
                
                const data = {
                    channelId: channelId,
                    title: authTitle.value || '서버 인증',
                    description: authDescription.value || '아래 버튼을 클릭하여 서버 인증을 완료해주세요.',
                    buttonText: authButtonText.value || '인증하기',
                    _csrf: '<%= csrfToken %>'
                };
                
                try {
                    const response = await fetch('/setting/send/auth-message', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    });
                    
                    const result = await response.json();
                    
                    sendAuthMessageBtn.disabled = false;
                    sendAuthMessageBtn.innerHTML = '<i class="fas fa-paper-plane"></i> 인증 메시지 전송';
                    
                    if (result.success) {
                        const successMessage = document.createElement('div');
                        successMessage.className = 'message success-message';
                        successMessage.style.marginTop = '15px';
                        
                        successMessage.innerHTML = `
                            <i class="fas fa-check-circle"></i> 
                            인증 메시지가 성공적으로 전송되었습니다.<br>
                            인증 시 부여될 역할 ID: <strong>${result.roleId}</strong>
                        `;
                        
                        const prevMessage = document.querySelector('.auth-form .message');
                        if (prevMessage) {
                            prevMessage.remove();
                        }
                        
                        document.querySelector('.auth-form').appendChild(successMessage);
                        
                        setTimeout(() => {
                            successMessage.style.opacity = '0';
                            setTimeout(() => {
                                successMessage.remove();
                            }, 500);
                        }, 5000);
                    } else {
                        const errorMessage = document.createElement('div');
                        errorMessage.className = 'message error-message';
                        errorMessage.style.marginTop = '15px';
                        errorMessage.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${result.message}`;
                        
                        const prevMessage = document.querySelector('.auth-form .message');
                        if (prevMessage) {
                            prevMessage.remove();
                        }
                        
                        document.querySelector('.auth-form').appendChild(errorMessage);
                        
                        setTimeout(() => {
                            errorMessage.style.opacity = '0';
                            setTimeout(() => {
                                errorMessage.remove();
                            }, 500);
                        }, 5000);
                    }
                } catch (error) {
                    sendAuthMessageBtn.disabled = false;
                    sendAuthMessageBtn.innerHTML = '<i class="fas fa-paper-plane"></i> 인증 메시지 전송';
                    
                    alert('오류가 발생했습니다: ' + error.message);
                }
            });
        });
        
        setTimeout(() => {
            const messages = document.querySelectorAll('.message');
            messages.forEach(msg => {
                msg.style.display = 'none';
            });
        }, 8000);
    </script>
</body>
</html>

<!-- V1.4.2 --> 