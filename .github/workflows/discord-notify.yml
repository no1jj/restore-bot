name: Discord Notification

on:
  push:
    branches: ["*"]
    tags: ["v*"]
    paths:
      - 'src/**'
      - 'docs/**'
  pull_request:
    types: [opened, closed, labeled, unlabeled]
    paths:
      - 'src/**'
      - 'docs/**'
  release:
    types: [published]
  issues:
    types: [opened, closed]
  issue_comment:
    types: [created]
  schedule:
    - cron: '0 9 * * 1'  # 매주 월요일 한국시간 09:00

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get context
        id: context
        run: |
          echo "Event=${{ github.event_name }}"    >> $GITHUB_OUTPUT
          echo "Ref=${{ github.ref }}"             >> $GITHUB_OUTPUT
          echo "Repo=${{ github.repository }}"     >> $GITHUB_OUTPUT
          echo "Actor=${{ github.actor }}"         >> $GITHUB_OUTPUT
          echo "Sha=${{ github.sha }}"             >> $GITHUB_OUTPUT
          echo "Action=${{ github.event.action }}" >> $GITHUB_OUTPUT
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "Timestamp=$TIMESTAMP"              >> $GITHUB_OUTPUT

      - name: Get commit info (push only)
        id: commit
        if: ${{ github.event_name == 'push' }}
        run: |
          MSG=$(git log -1 --pretty=format:'%s')
          AUTHOR=$(git log -1 --pretty=format:'%an')
          echo "Msg=$MSG"                          >> $GITHUB_OUTPUT
          echo "CommitAuthor=$AUTHOR"              >> $GITHUB_OUTPUT
          echo "Url=https://github.com/${{ github.repository }}/commit/${{ github.sha }}" >> $GITHUB_OUTPUT
          FILES=$(git diff --name-only HEAD~1 | wc -l)
          DIFF=$(git diff --shortstat HEAD~1 || echo "0 files changed")
          INS=$(echo "$DIFF" | grep -o '[0-9]\+ insertion' | cut -d' ' -f1 || echo "0")
          DEL=$(echo "$DIFF" | grep -o '[0-9]\+ deletion' | cut -d' ' -f1 || echo "0")
          echo "Files=$FILES"                      >> $GITHUB_OUTPUT
          echo "Insertions=$INS"                   >> $GITHUB_OUTPUT
          echo "Deletions=$DEL"                    >> $GITHUB_OUTPUT

      - name: Get language stats (push only)
        id: lang
        if: ${{ github.event_name == 'push' }}
        run: |
          LANG_JSON=$(curl -s https://api.github.com/repos/${{ github.repository }}/languages)
          TOTAL=$(echo $LANG_JSON | jq 'add')
          if [ "$TOTAL" != "null" ] && [ "$TOTAL" -gt 0 ]; then
            STATS=$(echo $LANG_JSON | jq -r --arg total "$TOTAL" 'to_entries | map("\(.key): \((.value / ($total|tonumber) * 100) | round)%" ) | join(", ")')
            echo "LangStats=$STATS" >> $GITHUB_OUTPUT
          else
            echo "LangStats=No language data available" >> $GITHUB_OUTPUT
          fi

      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          ALLOWED_MENTIONS: '{"parse":["roles","users"]}'
        run: |
          EVENT="${{ steps.context.outputs.Event }}"
          ACTOR="${{ steps.context.outputs.Actor }}"
          REPO="${{ steps.context.outputs.Repo }}"
          REF="${{ steps.context.outputs.Ref }}"
          ACTION="${{ steps.context.outputs.Action }}"
          TS="${{ steps.context.outputs.Timestamp }}"

          generate_payload() {
            jq -n \
              --argjson allowed "$ALLOWED_MENTIONS" \
              --arg title "$1" \
              --arg desc "$2" \
              --arg timestamp "$TS" \
              --argjson color "$3" \
              --arg thread "$4" '{
                embeds: [{
                  title: $title,
                  description: $desc,
                  color: $color,
                  timestamp: $timestamp
                }],
                allowed_mentions: $allowed,
                thread_name: $thread,
                thread_auto_archive_duration: 1440
              }' > payload.json
          }

          if [ "$EVENT" == "push" ]; then
            MSG="${{ steps.commit.outputs.Msg }}"
            AUTHOR="${{ steps.commit.outputs.CommitAuthor }}"
            URL="${{ steps.commit.outputs.Url }}"
            FILES="${{ steps.commit.outputs.Files }}"
            INS="${{ steps.commit.outputs.Insertions }}"
            DEL="${{ steps.commit.outputs.Deletions }}"
            LANGS="${{ steps.lang.outputs.LangStats }}"

            if [[ "$REF" == refs/tags/* ]]; then
              TAG="${REF#refs/tags/}"
              DESC=$'**'"$AUTHOR"'** released tag `'"$TAG"'`.\n[🔗 View Release](https://github.com/'"$REPO"'/releases/tag/'"$TAG"')\n\n언어 통계: '"$LANGS"
              COLOR=16753920
              THREAD="release-$TAG"
            else
              DESC=$'**'"$AUTHOR"'**가 **'"$REPO"'**에 커밋했습니다:\n['"$MSG"']('"$URL"')\nFiles: '"$FILES"', +'"$INS"'/-'"$DEL"' lines\n\n언어 통계: '"$LANGS"
              COLOR=5814783
              THREAD="push-${GITHUB_SHA:0:7}"
            fi

            generate_payload "📦 Push Event" "$DESC" $COLOR "$THREAD"

          elif [ "$EVENT" == "pull_request" ]; then
            PR_NUM="${{ github.event.pull_request.number }}"
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_URL="${{ github.event.pull_request.html_url }}"
            PR_BODY="${{ github.event.pull_request.body }}"
            PR_AUTHOR="${{ github.event.pull_request.user.login }}"
            
            if [ "$ACTION" == "opened" ]; then
              DESC=$'**'"$PR_AUTHOR"'**가 새 PR을 열었습니다:\n[#'"$PR_NUM"': '"$PR_TITLE"']('"$PR_URL"')'
              COLOR=5793266
            elif [ "$ACTION" == "closed" ]; then
              if [ "${{ github.event.pull_request.merged }}" == "true" ]; then
                DESC=$'**'"$PR_AUTHOR"'**의 PR이 병합되었습니다:\n[#'"$PR_NUM"': '"$PR_TITLE"']('"$PR_URL"')'
                COLOR=10181046
              else
                DESC=$'**'"$PR_AUTHOR"'**의 PR이 닫혔습니다:\n[#'"$PR_NUM"': '"$PR_TITLE"']('"$PR_URL"')'
                COLOR=15158332
              fi
            elif [ "$ACTION" == "labeled" ] || [ "$ACTION" == "unlabeled" ]; then
              LABEL="${{ github.event.label.name }}"
              DESC=$'**'"$PR_AUTHOR"'**의 PR #'"$PR_NUM"'에 라벨 변경: `'"$LABEL"'` '"$ACTION"'\n['"$PR_TITLE"']('"$PR_URL"')'
              COLOR=3447003
            else
              exit 0
            fi
            
            THREAD="pr-$PR_NUM"
            generate_payload "🔀 Pull Request" "$DESC" $COLOR "$THREAD"

          elif [ "$EVENT" == "release" ]; then
            RELEASE_TAG="${{ github.event.release.tag_name }}"
            RELEASE_NAME="${{ github.event.release.name }}"
            RELEASE_URL="${{ github.event.release.html_url }}"
            RELEASE_AUTHOR="${{ github.event.release.author.login }}"
            RELEASE_BODY="${{ github.event.release.body }}"
            
            DESC=$'**'"$RELEASE_AUTHOR"'**가 새 릴리스를 발행했습니다:\n['"$RELEASE_NAME"' ('"$RELEASE_TAG"')]('"$RELEASE_URL"')'
            COLOR=16750848
            THREAD="release-$RELEASE_TAG"
            
            generate_payload "🚀 New Release" "$DESC" $COLOR "$THREAD"

          elif [ "$EVENT" == "issues" ]; then
            ISSUE_NUM="${{ github.event.issue.number }}"
            ISSUE_TITLE="${{ github.event.issue.title }}"
            ISSUE_URL="${{ github.event.issue.html_url }}"
            ISSUE_AUTHOR="${{ github.event.issue.user.login }}"
            
            if [ "$ACTION" == "opened" ]; then
              DESC=$'**'"$ISSUE_AUTHOR"'**가 새 이슈를 열었습니다:\n[#'"$ISSUE_NUM"': '"$ISSUE_TITLE"']('"$ISSUE_URL"')'
              COLOR=15844367
            elif [ "$ACTION" == "closed" ]; then
              DESC=$'**'"$ACTOR"'**가 이슈를 닫았습니다:\n[#'"$ISSUE_NUM"': '"$ISSUE_TITLE"']('"$ISSUE_URL"')'
              COLOR=5763719
            else
              exit 0
            fi
            
            THREAD="issue-$ISSUE_NUM"
            generate_payload "🐛 Issue" "$DESC" $COLOR "$THREAD"

          elif [ "$EVENT" == "issue_comment" ]; then
            COMMENT_AUTHOR="${{ github.event.comment.user.login }}"
            COMMENT_URL="${{ github.event.comment.html_url }}"
            ISSUE_NUM="${{ github.event.issue.number }}"
            ISSUE_TITLE="${{ github.event.issue.title }}"
            
            if [[ "${{ github.event.issue.pull_request }}" != "" ]]; then
              DESC=$'**'"$COMMENT_AUTHOR"'**가 PR에 댓글을 남겼습니다:\n[#'"$ISSUE_NUM"': '"$ISSUE_TITLE"']('"$COMMENT_URL"')'
              COLOR=3447003
              THREAD="pr-$ISSUE_NUM"
            else
              DESC=$'**'"$COMMENT_AUTHOR"'**가 이슈에 댓글을 남겼습니다:\n[#'"$ISSUE_NUM"': '"$ISSUE_TITLE"']('"$COMMENT_URL"')'
              COLOR=10027213
              THREAD="issue-$ISSUE_NUM"
            fi
            
            generate_payload "💬 New Comment" "$DESC" $COLOR "$THREAD"

          elif [ "$EVENT" == "schedule" ]; then
            DESC=$'정기 알림: 이번 주 개발 계획을 검토하세요!\n[저장소 링크](https://github.com/'"$REPO"')'
            COLOR=7506394
            THREAD="weekly-reminder-$(date +%Y%m%d)"
            
            generate_payload "📅 Weekly Reminder" "$DESC" $COLOR "$THREAD"
          else
            exit 0
          fi

          # Discord로 메시지 전송 시도, 실패 시 재시도
          curl -s -f -X POST -H "Content-Type: application/json" -d @payload.json "$DISCORD_WEBHOOK" || {
            echo "첫 번째 시도 실패. 5초 후 재시도합니다..."
            sleep 5
            curl -s -f -X POST -H "Content-Type: application/json" -d @payload.json "$DISCORD_WEBHOOK" || {
              echo "두 번째 시도도 실패했습니다. Discord webhook URL을 확인하세요."
              exit 1
            }
          }
          
          echo "Discord 알림이 성공적으로 전송되었습니다."
